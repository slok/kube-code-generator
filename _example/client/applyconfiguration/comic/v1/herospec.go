// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	comicv1 "github.com/slok/kube-code-generator/example/apis/comic/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// HeroSpecApplyConfiguration represents a declarative configuration of the HeroSpec type for use
// with apply.
type HeroSpecApplyConfiguration struct {
	Name        *string           `json:"name,omitempty"`
	City        *string           `json:"city,omitempty"`
	Kind        *comicv1.HeroType `json:"kind,omitempty"`
	BirthDate   *metav1.Time      `json:"birthDate,omitempty"`
	SuperPowers []string          `json:"superPowers,omitempty"`
}

// HeroSpecApplyConfiguration constructs a declarative configuration of the HeroSpec type for use with
// apply.
func HeroSpec() *HeroSpecApplyConfiguration {
	return &HeroSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *HeroSpecApplyConfiguration) WithName(value string) *HeroSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithCity sets the City field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the City field is set to the value of the last call.
func (b *HeroSpecApplyConfiguration) WithCity(value string) *HeroSpecApplyConfiguration {
	b.City = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *HeroSpecApplyConfiguration) WithKind(value comicv1.HeroType) *HeroSpecApplyConfiguration {
	b.Kind = &value
	return b
}

// WithBirthDate sets the BirthDate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BirthDate field is set to the value of the last call.
func (b *HeroSpecApplyConfiguration) WithBirthDate(value metav1.Time) *HeroSpecApplyConfiguration {
	b.BirthDate = &value
	return b
}

// WithSuperPowers adds the given value to the SuperPowers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SuperPowers field.
func (b *HeroSpecApplyConfiguration) WithSuperPowers(values ...string) *HeroSpecApplyConfiguration {
	for i := range values {
		b.SuperPowers = append(b.SuperPowers, values[i])
	}
	return b
}
