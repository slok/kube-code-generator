// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package generatemock

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewBashExecutor creates a new instance of BashExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBashExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *BashExecutor {
	mock := &BashExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BashExecutor is an autogenerated mock type for the BashExecutor type
type BashExecutor struct {
	mock.Mock
}

type BashExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *BashExecutor) EXPECT() *BashExecutor_Expecter {
	return &BashExecutor_Expecter{mock: &_m.Mock}
}

// BashExec provides a mock function for the type BashExecutor
func (_mock *BashExecutor) BashExec(ctx context.Context, bashCmd string) (string, error) {
	ret := _mock.Called(ctx, bashCmd)

	if len(ret) == 0 {
		panic("no return value specified for BashExec")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, bashCmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, bashCmd)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, bashCmd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BashExecutor_BashExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BashExec'
type BashExecutor_BashExec_Call struct {
	*mock.Call
}

// BashExec is a helper method to define mock.On call
//   - ctx
//   - bashCmd
func (_e *BashExecutor_Expecter) BashExec(ctx interface{}, bashCmd interface{}) *BashExecutor_BashExec_Call {
	return &BashExecutor_BashExec_Call{Call: _e.mock.On("BashExec", ctx, bashCmd)}
}

func (_c *BashExecutor_BashExec_Call) Run(run func(ctx context.Context, bashCmd string)) *BashExecutor_BashExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BashExecutor_BashExec_Call) Return(s string, err error) *BashExecutor_BashExec_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *BashExecutor_BashExec_Call) RunAndReturn(run func(ctx context.Context, bashCmd string) (string, error)) *BashExecutor_BashExec_Call {
	_c.Call.Return(run)
	return _c
}
