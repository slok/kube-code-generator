package main

import (
	"github.com/alecthomas/kingpin/v2"
)

// CmdConfig represents the configuration of the command.
type CmdConfig struct {
	Debug bool

	CodeGenPath        string
	ControllerGenBin   string
	APIsPath           string
	GoCodeOutPath      string
	CRDsOutPath        string
	BoilerplatePath    string
	EnableApplyConfigs bool
}

// NewCmdConfig returns a new command configuration.
func NewCmdConfig(args []string) (*CmdConfig, error) {
	c := &CmdConfig{}
	app := kingpin.New("kube-code-generator", "The easiest way to create Kubernetes CRD related Go code and manifests.")
	app.DefaultEnvars()

	app.Flag("debug", "Enable debug mode.").BoolVar(&c.Debug)

	app.Flag("codegen-path", "The path where github.com/kubernetes/code-generator app code lives.").Required().StringVar(&c.CodeGenPath)
	app.Flag("controller-gen-bin", "The path or binary name of controller-gen ().").Default("controller-gen").StringVar(&c.ControllerGenBin)

	app.Flag("apis-in", "The path to the APIs root, it must be a relative path from the root where this app is execute.").Required().StringVar(&c.APIsPath)
	app.Flag("go-gen-out", "The path to the Go auto generated code, it must be a relative path from the root where this app is execute.").StringVar(&c.GoCodeOutPath)
	app.Flag("crd-gen-out", "The path to the Go auto generated code, it must be a relative path from the root where this app is execute.").StringVar(&c.CRDsOutPath)
	app.Flag("boilerplate-path", "Path to boilerplate text file, this file will be used to add this information to all the autogenerated code.").StringVar(&c.BoilerplatePath)

	app.Flag("apply-configurations", "If enabled, apply configurations clients and types will be created for the CR types.").BoolVar(&c.EnableApplyConfigs)

	_, err := app.Parse(args[1:])
	if err != nil {
		return nil, err
	}

	return c, nil
}
